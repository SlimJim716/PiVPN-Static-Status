#!/bin/bash


#-------------------------------------------------------
#                   CONFIG AREA
#-------------------------------------------------------
wg_enabled=true #set to true if you have Wireguard enabled in PiVPN, set to false otherwise
ovpn_enabled=true #set to true if you have OpenVPN enabled in PiVPN, set to false otherwise
banner_name="PiVPN Status" #(OPTIONAL) change the name of the top ascii banner. Requires figlet.
#-------------------------------------------------------
#-------------------------------------------------------


PATH=/usr/bin:/bin:/usr/local/bin

#check for PiVPN installaion, abort if it is not installed
if ! command -v pivpn &> /dev/null
then
	printf "PiVPN is required!<br />\n Check to see that PiVPN is installed<br />\n Visit https://www.pivpn.io/ for instructions."
	date
	exit 1
fi

#variables -> amount of lines to skip when reading output from the respective command
#ie. to skip the headers that dont print right
wgskip=2
ovpnskip=5

#check to see which vpns are installed with pivpn, set proper commands accordingly
if [ $wg_enabled = "true" ] && [ $ovpn_enabled = "true" ]
then
	wg_command="/usr/local/bin/pivpn wg -c"
	ovpn_command="/usr/local/bin/pivpn ovpn -c"
else
	wg_command="/usr/local/bin/pivpn -c"
	ovpn_command="/usr/local/bin/pivpn -c"
fi


#begin doc
printf "<!DOCTYPE html>\n <title>VPN Status</title>\n"


#check for figlet installation - for a neat logo :)
if command -v figlet &> /dev/null
then
	printf "<pre>\n"
	figlet $banner_name
	printf "</pre>\n"
fi


#Wireguard section
if [ $wg_enabled = "true" ]
then
	printf "<h2>WIREGUARD</h2>\n <h4><pre>Name                      Remote IP                 Virtual IP      Bytes Received      Bytes Sent      Last Seen</pre></h4>\n"
	$wg_command | while read -r line
	do
		((wgskip <= 0)) && printf "%s\n" "<pre>$line</pre>"
		((wgskip--))
	done
fi
printf "<br />\n"


#OVPN Section
if [ $ovpn_enabled = "true" ]
then
	printf "<h2>OPENVPN</h2>\n <h4><pre>Name                  Remote IP                 Virtual IP      Bytes Received      Bytes Sent      Connected Since</pre></h4>\n"
	$ovpn_command | while read -r line
	do
		((ovpnskip <= 0)) && printf "%s\n" "<pre>$line</pre>"
		((ovpnskip--))
	done
fi
printf "<br />\n"


#Information section
printf "__________________________________<br />\n <b>Last Updated</b><br />\n"
date
